package com.deray.meditation.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.deray.meditation.db.bean.Search;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH".
*/
public class SearchDao extends AbstractDao<Search, String> {

    public static final String TABLENAME = "SEARCH";

    /**
     * Properties of entity Search.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property Search1 = new Property(1, String.class, "search1", false, "SEARCH1");
        public final static Property Search2 = new Property(2, String.class, "search2", false, "SEARCH2");
        public final static Property Search3 = new Property(3, String.class, "search3", false, "SEARCH3");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property TraditionalSearch1 = new Property(5, String.class, "traditionalSearch1", false, "TRADITIONAL_SEARCH1");
        public final static Property TraditionalSearch2 = new Property(6, String.class, "traditionalSearch2", false, "TRADITIONAL_SEARCH2");
        public final static Property TraditionalSearch3 = new Property(7, String.class, "traditionalSearch3", false, "TRADITIONAL_SEARCH3");
        public final static Property CompleteSearch1 = new Property(8, String.class, "completeSearch1", false, "COMPLETE_SEARCH1");
        public final static Property CompleteSearch2 = new Property(9, String.class, "completeSearch2", false, "COMPLETE_SEARCH2");
        public final static Property CompleteSearch3 = new Property(10, String.class, "completeSearch3", false, "COMPLETE_SEARCH3");
        public final static Property InitialSearch1 = new Property(11, String.class, "initialSearch1", false, "INITIAL_SEARCH1");
        public final static Property InitialSearch2 = new Property(12, String.class, "initialSearch2", false, "INITIAL_SEARCH2");
        public final static Property InitialSearch3 = new Property(13, String.class, "initialSearch3", false, "INITIAL_SEARCH3");
        public final static Property MusicKey = new Property(14, String.class, "musicKey", false, "MUSIC_KEY");
    }


    public SearchDao(DaoConfig config) {
        super(config);
    }
    
    public SearchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"SEARCH1\" TEXT," + // 1: search1
                "\"SEARCH2\" TEXT," + // 2: search2
                "\"SEARCH3\" TEXT," + // 3: search3
                "\"TYPE\" TEXT," + // 4: type
                "\"TRADITIONAL_SEARCH1\" TEXT," + // 5: traditionalSearch1
                "\"TRADITIONAL_SEARCH2\" TEXT," + // 6: traditionalSearch2
                "\"TRADITIONAL_SEARCH3\" TEXT," + // 7: traditionalSearch3
                "\"COMPLETE_SEARCH1\" TEXT," + // 8: completeSearch1
                "\"COMPLETE_SEARCH2\" TEXT," + // 9: completeSearch2
                "\"COMPLETE_SEARCH3\" TEXT," + // 10: completeSearch3
                "\"INITIAL_SEARCH1\" TEXT," + // 11: initialSearch1
                "\"INITIAL_SEARCH2\" TEXT," + // 12: initialSearch2
                "\"INITIAL_SEARCH3\" TEXT," + // 13: initialSearch3
                "\"MUSIC_KEY\" TEXT);"); // 14: musicKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Search entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String search1 = entity.getSearch1();
        if (search1 != null) {
            stmt.bindString(2, search1);
        }
 
        String search2 = entity.getSearch2();
        if (search2 != null) {
            stmt.bindString(3, search2);
        }
 
        String search3 = entity.getSearch3();
        if (search3 != null) {
            stmt.bindString(4, search3);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String traditionalSearch1 = entity.getTraditionalSearch1();
        if (traditionalSearch1 != null) {
            stmt.bindString(6, traditionalSearch1);
        }
 
        String traditionalSearch2 = entity.getTraditionalSearch2();
        if (traditionalSearch2 != null) {
            stmt.bindString(7, traditionalSearch2);
        }
 
        String traditionalSearch3 = entity.getTraditionalSearch3();
        if (traditionalSearch3 != null) {
            stmt.bindString(8, traditionalSearch3);
        }
 
        String completeSearch1 = entity.getCompleteSearch1();
        if (completeSearch1 != null) {
            stmt.bindString(9, completeSearch1);
        }
 
        String completeSearch2 = entity.getCompleteSearch2();
        if (completeSearch2 != null) {
            stmt.bindString(10, completeSearch2);
        }
 
        String completeSearch3 = entity.getCompleteSearch3();
        if (completeSearch3 != null) {
            stmt.bindString(11, completeSearch3);
        }
 
        String initialSearch1 = entity.getInitialSearch1();
        if (initialSearch1 != null) {
            stmt.bindString(12, initialSearch1);
        }
 
        String initialSearch2 = entity.getInitialSearch2();
        if (initialSearch2 != null) {
            stmt.bindString(13, initialSearch2);
        }
 
        String initialSearch3 = entity.getInitialSearch3();
        if (initialSearch3 != null) {
            stmt.bindString(14, initialSearch3);
        }
 
        String musicKey = entity.getMusicKey();
        if (musicKey != null) {
            stmt.bindString(15, musicKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Search entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String search1 = entity.getSearch1();
        if (search1 != null) {
            stmt.bindString(2, search1);
        }
 
        String search2 = entity.getSearch2();
        if (search2 != null) {
            stmt.bindString(3, search2);
        }
 
        String search3 = entity.getSearch3();
        if (search3 != null) {
            stmt.bindString(4, search3);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String traditionalSearch1 = entity.getTraditionalSearch1();
        if (traditionalSearch1 != null) {
            stmt.bindString(6, traditionalSearch1);
        }
 
        String traditionalSearch2 = entity.getTraditionalSearch2();
        if (traditionalSearch2 != null) {
            stmt.bindString(7, traditionalSearch2);
        }
 
        String traditionalSearch3 = entity.getTraditionalSearch3();
        if (traditionalSearch3 != null) {
            stmt.bindString(8, traditionalSearch3);
        }
 
        String completeSearch1 = entity.getCompleteSearch1();
        if (completeSearch1 != null) {
            stmt.bindString(9, completeSearch1);
        }
 
        String completeSearch2 = entity.getCompleteSearch2();
        if (completeSearch2 != null) {
            stmt.bindString(10, completeSearch2);
        }
 
        String completeSearch3 = entity.getCompleteSearch3();
        if (completeSearch3 != null) {
            stmt.bindString(11, completeSearch3);
        }
 
        String initialSearch1 = entity.getInitialSearch1();
        if (initialSearch1 != null) {
            stmt.bindString(12, initialSearch1);
        }
 
        String initialSearch2 = entity.getInitialSearch2();
        if (initialSearch2 != null) {
            stmt.bindString(13, initialSearch2);
        }
 
        String initialSearch3 = entity.getInitialSearch3();
        if (initialSearch3 != null) {
            stmt.bindString(14, initialSearch3);
        }
 
        String musicKey = entity.getMusicKey();
        if (musicKey != null) {
            stmt.bindString(15, musicKey);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Search readEntity(Cursor cursor, int offset) {
        Search entity = new Search( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // search1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // search2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // search3
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // traditionalSearch1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // traditionalSearch2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // traditionalSearch3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // completeSearch1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // completeSearch2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // completeSearch3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // initialSearch1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // initialSearch2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // initialSearch3
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // musicKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Search entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSearch1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearch2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearch3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTraditionalSearch1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTraditionalSearch2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTraditionalSearch3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompleteSearch1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompleteSearch2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompleteSearch3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInitialSearch1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInitialSearch2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setInitialSearch3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMusicKey(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Search entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(Search entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Search entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
